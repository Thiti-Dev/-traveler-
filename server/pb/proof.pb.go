// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: proof.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProofThread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatorId                   int64                  `protobuf:"varint,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	ContentMsg                  string                 `protobuf:"bytes,3,opt,name=content_msg,json=contentMsg,proto3" json:"content_msg,omitempty"`
	SecretCode                  string                 `protobuf:"bytes,4,opt,name=secret_code,json=secretCode,proto3" json:"secret_code,omitempty"`
	CreatedAt                   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AmountOfDayWouldBeLastUntil int64                  `protobuf:"varint,6,opt,name=amount_of_day_would_be_last_until,json=amountOfDayWouldBeLastUntil,proto3" json:"amount_of_day_would_be_last_until,omitempty"`
	RevealAt                    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=reveal_at,json=revealAt,proto3" json:"reveal_at,omitempty"`
	IsSolved                    bool                   `protobuf:"varint,8,opt,name=is_solved,json=isSolved,proto3" json:"is_solved,omitempty"`
	SolverId                    int64                  `protobuf:"varint,9,opt,name=solver_id,json=solverId,proto3" json:"solver_id,omitempty"`
	SolverAka                   string                 `protobuf:"bytes,10,opt,name=solver_aka,json=solverAka,proto3" json:"solver_aka,omitempty"`
	SolvedAt                    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=solved_at,json=solvedAt,proto3" json:"solved_at,omitempty"`
}

func (x *ProofThread) Reset() {
	*x = ProofThread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proof_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofThread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofThread) ProtoMessage() {}

func (x *ProofThread) ProtoReflect() protoreflect.Message {
	mi := &file_proof_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofThread.ProtoReflect.Descriptor instead.
func (*ProofThread) Descriptor() ([]byte, []int) {
	return file_proof_proto_rawDescGZIP(), []int{0}
}

func (x *ProofThread) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProofThread) GetCreatorId() int64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *ProofThread) GetContentMsg() string {
	if x != nil {
		return x.ContentMsg
	}
	return ""
}

func (x *ProofThread) GetSecretCode() string {
	if x != nil {
		return x.SecretCode
	}
	return ""
}

func (x *ProofThread) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProofThread) GetAmountOfDayWouldBeLastUntil() int64 {
	if x != nil {
		return x.AmountOfDayWouldBeLastUntil
	}
	return 0
}

func (x *ProofThread) GetRevealAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RevealAt
	}
	return nil
}

func (x *ProofThread) GetIsSolved() bool {
	if x != nil {
		return x.IsSolved
	}
	return false
}

func (x *ProofThread) GetSolverId() int64 {
	if x != nil {
		return x.SolverId
	}
	return 0
}

func (x *ProofThread) GetSolverAka() string {
	if x != nil {
		return x.SolverAka
	}
	return ""
}

func (x *ProofThread) GetSolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SolvedAt
	}
	return nil
}

type CreateProofThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentMsg                  string `protobuf:"bytes,1,opt,name=content_msg,json=contentMsg,proto3" json:"content_msg,omitempty"`
	AmountOfDayWouldBeLastUntil int64  `protobuf:"varint,2,opt,name=amount_of_day_would_be_last_until,json=amountOfDayWouldBeLastUntil,proto3" json:"amount_of_day_would_be_last_until,omitempty"`
}

func (x *CreateProofThreadRequest) Reset() {
	*x = CreateProofThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proof_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProofThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProofThreadRequest) ProtoMessage() {}

func (x *CreateProofThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proof_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProofThreadRequest.ProtoReflect.Descriptor instead.
func (*CreateProofThreadRequest) Descriptor() ([]byte, []int) {
	return file_proof_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProofThreadRequest) GetContentMsg() string {
	if x != nil {
		return x.ContentMsg
	}
	return ""
}

func (x *CreateProofThreadRequest) GetAmountOfDayWouldBeLastUntil() int64 {
	if x != nil {
		return x.AmountOfDayWouldBeLastUntil
	}
	return 0
}

type CreateProofThreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofThread *ProofThread `protobuf:"bytes,1,opt,name=proof_thread,json=proofThread,proto3" json:"proof_thread,omitempty"`
}

func (x *CreateProofThreadResponse) Reset() {
	*x = CreateProofThreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proof_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProofThreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProofThreadResponse) ProtoMessage() {}

func (x *CreateProofThreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proof_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProofThreadResponse.ProtoReflect.Descriptor instead.
func (*CreateProofThreadResponse) Descriptor() ([]byte, []int) {
	return file_proof_proto_rawDescGZIP(), []int{2}
}

func (x *CreateProofThreadResponse) GetProofThread() *ProofThread {
	if x != nil {
		return x.ProofThread
	}
	return nil
}

var File_proof_proto protoreflect.FileDescriptor

var file_proof_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x03, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x21, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x57, 0x6f, 0x75,
	0x6c, 0x64, 0x42, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x6b, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x41, 0x6b, 0x61, 0x12,
	0x37, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a, 0x21, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x57, 0x6f,
	0x75, 0x6c, 0x64, 0x42, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x56,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x32, 0x70, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x23, 0x2e, 0x74, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proof_proto_rawDescOnce sync.Once
	file_proof_proto_rawDescData = file_proof_proto_rawDesc
)

func file_proof_proto_rawDescGZIP() []byte {
	file_proof_proto_rawDescOnce.Do(func() {
		file_proof_proto_rawDescData = protoimpl.X.CompressGZIP(file_proof_proto_rawDescData)
	})
	return file_proof_proto_rawDescData
}

var file_proof_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proof_proto_goTypes = []interface{}{
	(*ProofThread)(nil),               // 0: traveller.ProofThread
	(*CreateProofThreadRequest)(nil),  // 1: traveller.CreateProofThreadRequest
	(*CreateProofThreadResponse)(nil), // 2: traveller.CreateProofThreadResponse
	(*timestamppb.Timestamp)(nil),     // 3: google.protobuf.Timestamp
}
var file_proof_proto_depIdxs = []int32{
	3, // 0: traveller.ProofThread.created_at:type_name -> google.protobuf.Timestamp
	3, // 1: traveller.ProofThread.reveal_at:type_name -> google.protobuf.Timestamp
	3, // 2: traveller.ProofThread.solved_at:type_name -> google.protobuf.Timestamp
	0, // 3: traveller.CreateProofThreadResponse.proof_thread:type_name -> traveller.ProofThread
	1, // 4: traveller.ProofService.CreateProofThread:input_type -> traveller.CreateProofThreadRequest
	2, // 5: traveller.ProofService.CreateProofThread:output_type -> traveller.CreateProofThreadResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proof_proto_init() }
func file_proof_proto_init() {
	if File_proof_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proof_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofThread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proof_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProofThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proof_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProofThreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proof_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proof_proto_goTypes,
		DependencyIndexes: file_proof_proto_depIdxs,
		MessageInfos:      file_proof_proto_msgTypes,
	}.Build()
	File_proof_proto = out.File
	file_proof_proto_rawDesc = nil
	file_proof_proto_goTypes = nil
	file_proof_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProofServiceClient is the client API for ProofService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProofServiceClient interface {
	CreateProofThread(ctx context.Context, in *CreateProofThreadRequest, opts ...grpc.CallOption) (*CreateProofThreadResponse, error)
}

type proofServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProofServiceClient(cc grpc.ClientConnInterface) ProofServiceClient {
	return &proofServiceClient{cc}
}

func (c *proofServiceClient) CreateProofThread(ctx context.Context, in *CreateProofThreadRequest, opts ...grpc.CallOption) (*CreateProofThreadResponse, error) {
	out := new(CreateProofThreadResponse)
	err := c.cc.Invoke(ctx, "/traveller.ProofService/CreateProofThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProofServiceServer is the server API for ProofService service.
type ProofServiceServer interface {
	CreateProofThread(context.Context, *CreateProofThreadRequest) (*CreateProofThreadResponse, error)
}

// UnimplementedProofServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProofServiceServer struct {
}

func (*UnimplementedProofServiceServer) CreateProofThread(context.Context, *CreateProofThreadRequest) (*CreateProofThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProofThread not implemented")
}

func RegisterProofServiceServer(s *grpc.Server, srv ProofServiceServer) {
	s.RegisterService(&_ProofService_serviceDesc, srv)
}

func _ProofService_CreateProofThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProofThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServiceServer).CreateProofThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/traveller.ProofService/CreateProofThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServiceServer).CreateProofThread(ctx, req.(*CreateProofThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProofService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traveller.ProofService",
	HandlerType: (*ProofServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProofThread",
			Handler:    _ProofService_CreateProofThread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proof.proto",
}
