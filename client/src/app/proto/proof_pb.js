// source: proof.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var common_message_pb = require('./common_message_pb.js');
goog.object.extend(proto, common_message_pb);
goog.exportSymbol('proto.traveller.CreateProofThreadRequest', null, global);
goog.exportSymbol('proto.traveller.CreateProofThreadResponse', null, global);
goog.exportSymbol('proto.traveller.GetAllProofThreadResponse', null, global);
goog.exportSymbol('proto.traveller.ProofThread', null, global);
goog.exportSymbol('proto.traveller.RemoveProofThreadRequest', null, global);
goog.exportSymbol('proto.traveller.RemoveProofThreadResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.traveller.ProofThread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.traveller.ProofThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.traveller.ProofThread.displayName = 'proto.traveller.ProofThread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.traveller.CreateProofThreadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.traveller.CreateProofThreadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.traveller.CreateProofThreadRequest.displayName = 'proto.traveller.CreateProofThreadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.traveller.CreateProofThreadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.traveller.CreateProofThreadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.traveller.CreateProofThreadResponse.displayName = 'proto.traveller.CreateProofThreadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.traveller.GetAllProofThreadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.traveller.GetAllProofThreadResponse.repeatedFields_, null);
};
goog.inherits(proto.traveller.GetAllProofThreadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.traveller.GetAllProofThreadResponse.displayName = 'proto.traveller.GetAllProofThreadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.traveller.RemoveProofThreadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.traveller.RemoveProofThreadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.traveller.RemoveProofThreadRequest.displayName = 'proto.traveller.RemoveProofThreadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.traveller.RemoveProofThreadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.traveller.RemoveProofThreadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.traveller.RemoveProofThreadResponse.displayName = 'proto.traveller.RemoveProofThreadResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.traveller.ProofThread.prototype.toObject = function(opt_includeInstance) {
  return proto.traveller.ProofThread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.traveller.ProofThread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.ProofThread.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    creatorId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contentMsg: jspb.Message.getFieldWithDefault(msg, 3, ""),
    secretCode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    amountOfDayWouldBeLastUntil: jspb.Message.getFieldWithDefault(msg, 6, 0),
    revealAt: (f = msg.getRevealAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    isSolved: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    solverId: jspb.Message.getFieldWithDefault(msg, 9, 0),
    solverAka: jspb.Message.getFieldWithDefault(msg, 10, ""),
    solvedAt: (f = msg.getSolvedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.traveller.ProofThread}
 */
proto.traveller.ProofThread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.traveller.ProofThread;
  return proto.traveller.ProofThread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.traveller.ProofThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.traveller.ProofThread}
 */
proto.traveller.ProofThread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentMsg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretCode(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmountOfDayWouldBeLastUntil(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setRevealAt(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSolved(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSolverId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSolverAka(value);
      break;
    case 11:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSolvedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.traveller.ProofThread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.traveller.ProofThread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.traveller.ProofThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.ProofThread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCreatorId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getContentMsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSecretCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAmountOfDayWouldBeLastUntil();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getRevealAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getIsSolved();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getSolverId();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getSolverAka();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSolvedAt();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.traveller.ProofThread.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 creator_id = 2;
 * @return {number}
 */
proto.traveller.ProofThread.prototype.getCreatorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.setCreatorId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string content_msg = 3;
 * @return {string}
 */
proto.traveller.ProofThread.prototype.getContentMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.setContentMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string secret_code = 4;
 * @return {string}
 */
proto.traveller.ProofThread.prototype.getSecretCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.setSecretCode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.traveller.ProofThread.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.traveller.ProofThread} returns this
*/
proto.traveller.ProofThread.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.traveller.ProofThread.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 amount_of_day_would_be_last_until = 6;
 * @return {number}
 */
proto.traveller.ProofThread.prototype.getAmountOfDayWouldBeLastUntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.setAmountOfDayWouldBeLastUntil = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp reveal_at = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.traveller.ProofThread.prototype.getRevealAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.traveller.ProofThread} returns this
*/
proto.traveller.ProofThread.prototype.setRevealAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.clearRevealAt = function() {
  return this.setRevealAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.traveller.ProofThread.prototype.hasRevealAt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool is_solved = 8;
 * @return {boolean}
 */
proto.traveller.ProofThread.prototype.getIsSolved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.setIsSolved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int64 solver_id = 9;
 * @return {number}
 */
proto.traveller.ProofThread.prototype.getSolverId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.setSolverId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string solver_aka = 10;
 * @return {string}
 */
proto.traveller.ProofThread.prototype.getSolverAka = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.setSolverAka = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional google.protobuf.Timestamp solved_at = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.traveller.ProofThread.prototype.getSolvedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 11));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.traveller.ProofThread} returns this
*/
proto.traveller.ProofThread.prototype.setSolvedAt = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.traveller.ProofThread} returns this
 */
proto.traveller.ProofThread.prototype.clearSolvedAt = function() {
  return this.setSolvedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.traveller.ProofThread.prototype.hasSolvedAt = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.traveller.CreateProofThreadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.traveller.CreateProofThreadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.traveller.CreateProofThreadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.CreateProofThreadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contentMsg: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amountOfDayWouldBeLastUntil: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.traveller.CreateProofThreadRequest}
 */
proto.traveller.CreateProofThreadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.traveller.CreateProofThreadRequest;
  return proto.traveller.CreateProofThreadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.traveller.CreateProofThreadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.traveller.CreateProofThreadRequest}
 */
proto.traveller.CreateProofThreadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentMsg(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmountOfDayWouldBeLastUntil(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.traveller.CreateProofThreadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.traveller.CreateProofThreadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.traveller.CreateProofThreadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.CreateProofThreadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentMsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmountOfDayWouldBeLastUntil();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string content_msg = 1;
 * @return {string}
 */
proto.traveller.CreateProofThreadRequest.prototype.getContentMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.traveller.CreateProofThreadRequest} returns this
 */
proto.traveller.CreateProofThreadRequest.prototype.setContentMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount_of_day_would_be_last_until = 2;
 * @return {number}
 */
proto.traveller.CreateProofThreadRequest.prototype.getAmountOfDayWouldBeLastUntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.traveller.CreateProofThreadRequest} returns this
 */
proto.traveller.CreateProofThreadRequest.prototype.setAmountOfDayWouldBeLastUntil = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.traveller.CreateProofThreadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.traveller.CreateProofThreadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.traveller.CreateProofThreadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.CreateProofThreadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    proofThread: (f = msg.getProofThread()) && proto.traveller.ProofThread.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.traveller.CreateProofThreadResponse}
 */
proto.traveller.CreateProofThreadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.traveller.CreateProofThreadResponse;
  return proto.traveller.CreateProofThreadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.traveller.CreateProofThreadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.traveller.CreateProofThreadResponse}
 */
proto.traveller.CreateProofThreadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.traveller.ProofThread;
      reader.readMessage(value,proto.traveller.ProofThread.deserializeBinaryFromReader);
      msg.setProofThread(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.traveller.CreateProofThreadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.traveller.CreateProofThreadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.traveller.CreateProofThreadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.CreateProofThreadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProofThread();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.traveller.ProofThread.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProofThread proof_thread = 1;
 * @return {?proto.traveller.ProofThread}
 */
proto.traveller.CreateProofThreadResponse.prototype.getProofThread = function() {
  return /** @type{?proto.traveller.ProofThread} */ (
    jspb.Message.getWrapperField(this, proto.traveller.ProofThread, 1));
};


/**
 * @param {?proto.traveller.ProofThread|undefined} value
 * @return {!proto.traveller.CreateProofThreadResponse} returns this
*/
proto.traveller.CreateProofThreadResponse.prototype.setProofThread = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.traveller.CreateProofThreadResponse} returns this
 */
proto.traveller.CreateProofThreadResponse.prototype.clearProofThread = function() {
  return this.setProofThread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.traveller.CreateProofThreadResponse.prototype.hasProofThread = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.traveller.GetAllProofThreadResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.traveller.GetAllProofThreadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.traveller.GetAllProofThreadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.traveller.GetAllProofThreadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.GetAllProofThreadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    proofThreadsList: jspb.Message.toObjectList(msg.getProofThreadsList(),
    proto.traveller.ProofThread.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.traveller.GetAllProofThreadResponse}
 */
proto.traveller.GetAllProofThreadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.traveller.GetAllProofThreadResponse;
  return proto.traveller.GetAllProofThreadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.traveller.GetAllProofThreadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.traveller.GetAllProofThreadResponse}
 */
proto.traveller.GetAllProofThreadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.traveller.ProofThread;
      reader.readMessage(value,proto.traveller.ProofThread.deserializeBinaryFromReader);
      msg.addProofThreads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.traveller.GetAllProofThreadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.traveller.GetAllProofThreadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.traveller.GetAllProofThreadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.GetAllProofThreadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProofThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.traveller.ProofThread.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProofThread proof_threads = 1;
 * @return {!Array<!proto.traveller.ProofThread>}
 */
proto.traveller.GetAllProofThreadResponse.prototype.getProofThreadsList = function() {
  return /** @type{!Array<!proto.traveller.ProofThread>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.traveller.ProofThread, 1));
};


/**
 * @param {!Array<!proto.traveller.ProofThread>} value
 * @return {!proto.traveller.GetAllProofThreadResponse} returns this
*/
proto.traveller.GetAllProofThreadResponse.prototype.setProofThreadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.traveller.ProofThread=} opt_value
 * @param {number=} opt_index
 * @return {!proto.traveller.ProofThread}
 */
proto.traveller.GetAllProofThreadResponse.prototype.addProofThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.traveller.ProofThread, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.traveller.GetAllProofThreadResponse} returns this
 */
proto.traveller.GetAllProofThreadResponse.prototype.clearProofThreadsList = function() {
  return this.setProofThreadsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.traveller.RemoveProofThreadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.traveller.RemoveProofThreadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.traveller.RemoveProofThreadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.RemoveProofThreadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.traveller.RemoveProofThreadRequest}
 */
proto.traveller.RemoveProofThreadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.traveller.RemoveProofThreadRequest;
  return proto.traveller.RemoveProofThreadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.traveller.RemoveProofThreadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.traveller.RemoveProofThreadRequest}
 */
proto.traveller.RemoveProofThreadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.traveller.RemoveProofThreadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.traveller.RemoveProofThreadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.traveller.RemoveProofThreadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.RemoveProofThreadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string thread_id = 1;
 * @return {string}
 */
proto.traveller.RemoveProofThreadRequest.prototype.getThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.traveller.RemoveProofThreadRequest} returns this
 */
proto.traveller.RemoveProofThreadRequest.prototype.setThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.traveller.RemoveProofThreadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.traveller.RemoveProofThreadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.traveller.RemoveProofThreadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.RemoveProofThreadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultMsg: (f = msg.getResultMsg()) && common_message_pb.ResultMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.traveller.RemoveProofThreadResponse}
 */
proto.traveller.RemoveProofThreadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.traveller.RemoveProofThreadResponse;
  return proto.traveller.RemoveProofThreadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.traveller.RemoveProofThreadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.traveller.RemoveProofThreadResponse}
 */
proto.traveller.RemoveProofThreadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_message_pb.ResultMsg;
      reader.readMessage(value,common_message_pb.ResultMsg.deserializeBinaryFromReader);
      msg.setResultMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.traveller.RemoveProofThreadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.traveller.RemoveProofThreadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.traveller.RemoveProofThreadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.traveller.RemoveProofThreadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultMsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_message_pb.ResultMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultMsg result_msg = 1;
 * @return {?proto.traveller.ResultMsg}
 */
proto.traveller.RemoveProofThreadResponse.prototype.getResultMsg = function() {
  return /** @type{?proto.traveller.ResultMsg} */ (
    jspb.Message.getWrapperField(this, common_message_pb.ResultMsg, 1));
};


/**
 * @param {?proto.traveller.ResultMsg|undefined} value
 * @return {!proto.traveller.RemoveProofThreadResponse} returns this
*/
proto.traveller.RemoveProofThreadResponse.prototype.setResultMsg = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.traveller.RemoveProofThreadResponse} returns this
 */
proto.traveller.RemoveProofThreadResponse.prototype.clearResultMsg = function() {
  return this.setResultMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.traveller.RemoveProofThreadResponse.prototype.hasResultMsg = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.traveller);
